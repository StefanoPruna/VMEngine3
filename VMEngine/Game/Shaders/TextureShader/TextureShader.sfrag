#version 460 core

struct MaterialData
{
	//texture data
	sampler2D TColour;
	sampler2D TSpecular; //opposite of roughness
	sampler2D TEmissive;

	//multiplier
	vec3 MColour;
	vec3 MSpecular;
	vec3 MEmissive;
	
	float Shininess;
};

struct ShaderMaterial
{
	vec3 Colour;
	vec3 Specular;
	vec3 Emissive;
	float Shininess;
};

//material imported from the engine C++
uniform MaterialData ImportMat;

//vertex position, normal value and texture coordinates
in vec3 VPosition;
in vec3 VNormals;
in vec2 TextCoords;

//pos of the view camera
in vec3 CamPosition;

//return colour that gets put onto the mesh
out vec4 OutColour;

struct DirLight
{
	vec3 Colour;
	vec3 Direction;
	vec3 AmbientLight;
};

struct PointLight
{
	vec3 Colour;
	vec3 Position;
	float Attenuation;
};

//arrays of lights in the scene
DirLight[2] DirLights;
PointLight[50] PointLights;

vec3 CalculateDirLight(ShaderMaterial SMat, vec3 ViewDir, DirLight Light);
vec3 CalculatePointLight(ShaderMaterial SMat, vec3 ViewDir, PointLight Light);

void main()
{
	//readable shader material
	ShaderMaterial SMat;
	//getting the colour values from the texture and multiplying them by the muyltiplier
	SMat.Colour = texture(ImportMat.TColour, TextCoords).rgb * ImportMat.MColour;
	SMat.Specular = texture(ImportMat.TSpecular, TextCoords).rgb * ImportMat.MSpecular;
	SMat.Emissive = texture(ImportMat.TEmissive, TextCoords).rgb * ImportMat.MEmissive;
	SMat.Shininess = ImportMat.Shininess;

	vec3 ViewDir = normalize(CamPosition - VPosition);

	DirLights[0].Colour = vec3(1.0f);
	DirLights[0].Direction = vec3(0.0f, -1.0f, 0.0f);
	DirLights[0].AmbientLight = vec3(0.1f);

	PointLights[0].Colour = vec3(1.0f);
	PointLights[0].Position = vec3(2.0f, -1.0f, 0.0f);
	PointLights[0].Attenuation = 50.0f;

	PointLights[1].Colour = vec3(2.0f);
	PointLights[1].Position = vec3(-2.0f, 1.0f, 1.0f);
	PointLights[1].Attenuation = 1000.0f;

	vec3 result = CalculatePointLight(SMat, ViewDir, PointLights[0]);

	result += CalculateDirLight(SMat, ViewDir, DirLights[0]);

	//texture() accepts colour and coords to create an open GL texture
	OutColour = vec4(result, 1.0f);
}

vec3 CalculateDirLight(ShaderMaterial SMat, vec3 ViewDir, DirLight Light)
{
	//get the normalised light direction
	vec3 LightDir = normalize(-Light.Direction);

	//calculate the angle between the surface normal and the light direction
	//dot(product) gives a value between 1 and -1 depending if the vectors are facing each other
	float Angle = max(0.0, dot(normalize(VNormals), LightDir));

	// create a minimum value of constant light on the material
	vec3 AmbientLight = Light.AmbientLight * SMat.Colour;

	//increase the ambient light value by the emissive value
	AmbientLight += SMat.Emissive;

	//mixture light colour and the angle
	vec3 FinalColour = Light.Colour * (Angle * SMat.Colour);

	//get the reflection direction of the material surface
	vec3 ReflectDir = reflect(-LightDir, normalize(VNormals));

	//increase the light value of each vertex based on how shiny it should be
	float SpecPower = pow(max(0.0, dot(ViewDir, ReflectDir)), SMat.Shininess * 128.0f);

	//create the specular highlight based on colour, angle and spec power
	vec3 FinalSpecular = SpecPower * (Angle * SMat.Colour);

	//return the sum of all of the light factors
	return vec3(AmbientLight + FinalColour + FinalSpecular);
}

vec3 CalculatePointLight(ShaderMaterial SMat, vec3 ViewDir, PointLight Light)
{
	//get the normalised light direction
	vec3 LightDir = normalize(Light.Position - VPosition);

	//calculate the distance between the light and the vertex
	float Distance = length(Light.Position - VPosition);

	//set a value between 0 and 1 depending on the distance vs attenuation
	//0 = no light, 1 = full light
	float Attenuation = min(Light.Attenuation / (Distance * Distance), 1.0f);

	//calculate the angle between the surface normal and the light direction
	//dot(product) gives a value between 1 and -1 depending if the vectors are facing each other
	float Angle = max(0.0, dot(normalize(VNormals), LightDir));

	//create the falloff based on the angle and attenuation
	float Falloff = Angle * Attenuation;

	// create a minimum value of constant light on the material
	vec3 AmbientLight = vec3(0.01f) * SMat.Colour;

	//increase the ambient light value by the emissive value
	AmbientLight += SMat.Emissive;

	//mixture light colour and the angle
	vec3 FinalColour = Light.Colour * (Falloff * SMat.Colour);

	//get the reflection direction of the material surface
	vec3 ReflectDir = reflect(-LightDir, normalize(VNormals));

	//increase the light value of each vertex based on how shiny it should be
	float SpecPower = pow(max(0.0, dot(ViewDir, ReflectDir)), SMat.Shininess * 128.0f);

	//create the specular highlight based on colour, angle and spec power
	vec3 FinalSpecular = SpecPower * (Falloff * SMat.Colour);

	//return the sum of all of the light factors
	return vec3(AmbientLight + FinalColour + FinalSpecular);
}